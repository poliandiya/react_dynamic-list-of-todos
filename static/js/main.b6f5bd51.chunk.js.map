{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","selectStateOfTodo","getTodos","todos","filteredTodos","filter","todo","title","includes","completed","this","props","onUserSelection","className","type","name","value","onChange","event","setState","target","map","cn","checked","readOnly","onClick","userId","id","React","Component","API_URL","loadTodos","a","fetch","response","json","loadUser","CurrentUser","user","reloadUser","prevProps","email","phone","clear","App","selectedUserId","handleUserSelection","resetSelectedUser","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6f5bd51.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  onUserSelection: (userId: number) => void;\n}\n\ninterface State {\n  query: string;\n  selectStateOfTodo: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    selectStateOfTodo: 'all',\n  };\n\n  getTodos = (todos: Todo[]) => {\n    const { query, selectStateOfTodo } = this.state;\n\n    let filteredTodos = todos\n      .filter(todo => todo.title.includes(query));\n\n    if (selectStateOfTodo === 'active') {\n      filteredTodos = filteredTodos\n        .filter(todo => !todo.completed);\n    } else if (selectStateOfTodo === 'completed') {\n      filteredTodos = filteredTodos\n        .filter(todo => todo.completed);\n    }\n\n    return filteredTodos;\n  };\n\n  render() {\n    const { query, selectStateOfTodo } = this.state;\n    const { todos, onUserSelection } = this.props;\n\n    const filteredTodos = this.getTodos(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"todo\"\n            className=\"TodoList__input\"\n            value={query}\n            onChange={(event) => {\n              this.setState({ query: event.target.value });\n            }}\n          />\n          <select\n            name=\"stateOfTodo\"\n            className=\"TodoList__select\"\n            value={selectStateOfTodo}\n            onChange={(event) => {\n              this.setState({ selectStateOfTodo: event.target.value });\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={cn('TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelection(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport { loadUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  clear: () => void;\n}\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser(this.props.userId);\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      user\n        && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"CurrentUser__clear\"\n              onClick={this.props.clear}\n            >\n              Clear\n            </button>\n          </div>\n        )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { loadTodos } from './api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({ todos: data });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  resetSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelection={this.handleUserSelection}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clear={this.resetSelectedUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}